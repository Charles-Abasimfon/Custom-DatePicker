{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Dev/DatePicker/src/App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport DatePicker from './components/DatePicker';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * Returns the formatted date string in the format of MM/DD/YYYY.\n * @param date - The date object to be formatted.\n * @returns The formatted date string.\n */\nfunction getFormattedDate(date) {\n  const dd = date.getDate().toString().padStart(2, '0');\n  const mm = (date.getMonth() + 1).toString().padStart(2, '0');\n  const yyyy = date.getFullYear();\n  return `${mm}/${dd}/${yyyy}`;\n}\nconst App = () => {\n  _s();\n  // State variables to store and set the selected date and the blackout dates.\n  const [selectedDate, setSelectedDate] = useState(getFormattedDate(new Date()));\n  //Format of blackout dates strings in array should be: MM/DD/YYYY, testing with 2 dates for now\n  // eslint-disable-next-line\n  const [blackoutDates, setBlackoutDates] = useState(['03/16/2023', '03/30/2023']);\n\n  // Handles the date change event when the user types in the date.\n  const onDateChange = date => {\n    setSelectedDate(date);\n  };\n\n  // Handles the date pick event when the user selects a date from the calendar.\n  const onDatePick = date => {\n    const formattedDate = getFormattedDate(date);\n    setSelectedDate(formattedDate);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(DatePicker, {\n      selectedDate: selectedDate,\n      onDateChange: onDateChange,\n      onDatePick: onDatePick,\n      blackoutDates: blackoutDates\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"cVju27XW2pj885HmSyaBK4RqCRs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","DatePicker","jsxDEV","_jsxDEV","getFormattedDate","date","dd","getDate","toString","padStart","mm","getMonth","yyyy","getFullYear","App","_s","selectedDate","setSelectedDate","Date","blackoutDates","setBlackoutDates","onDateChange","onDatePick","formattedDate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/admin/Dev/DatePicker/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport DatePicker from './components/DatePicker';\nimport './App.css';\n\ninterface AppProps {}\n\n/**\n * Returns the formatted date string in the format of MM/DD/YYYY.\n * @param date - The date object to be formatted.\n * @returns The formatted date string.\n */\nfunction getFormattedDate(date: Date): string {\n  const dd: string | number = date.getDate().toString().padStart(2, '0');\n  const mm: string | number = (date.getMonth() + 1).toString().padStart(2, '0');\n  const yyyy: string | number = date.getFullYear();\n  return `${mm}/${dd}/${yyyy}`;\n}\n\nconst App: React.FC<AppProps> = () => {\n  // State variables to store and set the selected date and the blackout dates.\n  const [selectedDate, setSelectedDate] = useState<string>(\n    getFormattedDate(new Date())\n  );\n  //Format of blackout dates strings in array should be: MM/DD/YYYY, testing with 2 dates for now\n  // eslint-disable-next-line\n  const [blackoutDates, setBlackoutDates] = useState<string[]>([\n    '03/16/2023',\n    '03/30/2023',\n  ]);\n\n  // Handles the date change event when the user types in the date.\n  const onDateChange = (date: string): void => {\n    setSelectedDate(date);\n  };\n\n  // Handles the date pick event when the user selects a date from the calendar.\n  const onDatePick = (date: Date): void => {\n    const formattedDate = getFormattedDate(date);\n    setSelectedDate(formattedDate);\n  };\n\n  return (\n    <div className='App'>\n      <DatePicker\n        selectedDate={selectedDate}\n        onDateChange={onDateChange}\n        onDatePick={onDatePick}\n        blackoutDates={blackoutDates}\n      />\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAInB;AACA;AACA;AACA;AACA;AACA,SAASC,gBAAgBA,CAACC,IAAU,EAAU;EAC5C,MAAMC,EAAmB,GAAGD,IAAI,CAACE,OAAO,EAAE,CAACC,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EACtE,MAAMC,EAAmB,GAAG,CAACL,IAAI,CAACM,QAAQ,EAAE,GAAG,CAAC,EAAEH,QAAQ,EAAE,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC;EAC7E,MAAMG,IAAqB,GAAGP,IAAI,CAACQ,WAAW,EAAE;EAChD,OAAQ,GAAEH,EAAG,IAAGJ,EAAG,IAAGM,IAAK,EAAC;AAC9B;AAEA,MAAME,GAAuB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpC;EACA,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAC9CI,gBAAgB,CAAC,IAAIc,IAAI,EAAE,CAAC,CAC7B;EACD;EACA;EACA,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAW,CAC3D,YAAY,EACZ,YAAY,CACb,CAAC;;EAEF;EACA,MAAMqB,YAAY,GAAIhB,IAAY,IAAW;IAC3CY,eAAe,CAACZ,IAAI,CAAC;EACvB,CAAC;;EAED;EACA,MAAMiB,UAAU,GAAIjB,IAAU,IAAW;IACvC,MAAMkB,aAAa,GAAGnB,gBAAgB,CAACC,IAAI,CAAC;IAC5CY,eAAe,CAACM,aAAa,CAAC;EAChC,CAAC;EAED,oBACEpB,OAAA;IAAKqB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBtB,OAAA,CAACF,UAAU;MACTe,YAAY,EAAEA,YAAa;MAC3BK,YAAY,EAAEA,YAAa;MAC3BC,UAAU,EAAEA,UAAW;MACvBH,aAAa,EAAEA;IAAc;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAC7B;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV,CAAC;AAACd,EAAA,CAjCID,GAAuB;AAAAgB,EAAA,GAAvBhB,GAAuB;AAmC7B,eAAeA,GAAG;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}